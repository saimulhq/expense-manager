// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package expensepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpenseServiceClient is the client API for ExpenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpenseServiceClient interface {
	CreateExpense(ctx context.Context, in *CreateExpenseRequest, opts ...grpc.CallOption) (*CreateExpenseResponse, error)
	GetExpense(ctx context.Context, in *GetExpenseRequest, opts ...grpc.CallOption) (*GetExpenseResponse, error)
	UpdateExpense(ctx context.Context, in *UpdateExpenseRequest, opts ...grpc.CallOption) (*UpdateExpenseResponse, error)
	DeleteExpense(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error)
	GetAllExpense(ctx context.Context, in *GetAllExpenseRequest, opts ...grpc.CallOption) (*GetAllExpenseReponse, error)
}

type expenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenseServiceClient(cc grpc.ClientConnInterface) ExpenseServiceClient {
	return &expenseServiceClient{cc}
}

func (c *expenseServiceClient) CreateExpense(ctx context.Context, in *CreateExpenseRequest, opts ...grpc.CallOption) (*CreateExpenseResponse, error) {
	out := new(CreateExpenseResponse)
	err := c.cc.Invoke(ctx, "/expensepb.ExpenseService/CreateExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) GetExpense(ctx context.Context, in *GetExpenseRequest, opts ...grpc.CallOption) (*GetExpenseResponse, error) {
	out := new(GetExpenseResponse)
	err := c.cc.Invoke(ctx, "/expensepb.ExpenseService/GetExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) UpdateExpense(ctx context.Context, in *UpdateExpenseRequest, opts ...grpc.CallOption) (*UpdateExpenseResponse, error) {
	out := new(UpdateExpenseResponse)
	err := c.cc.Invoke(ctx, "/expensepb.ExpenseService/UpdateExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) DeleteExpense(ctx context.Context, in *DeleteExpenseRequest, opts ...grpc.CallOption) (*DeleteExpenseResponse, error) {
	out := new(DeleteExpenseResponse)
	err := c.cc.Invoke(ctx, "/expensepb.ExpenseService/DeleteExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) GetAllExpense(ctx context.Context, in *GetAllExpenseRequest, opts ...grpc.CallOption) (*GetAllExpenseReponse, error) {
	out := new(GetAllExpenseReponse)
	err := c.cc.Invoke(ctx, "/expensepb.ExpenseService/GetAllExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenseServiceServer is the server API for ExpenseService service.
// All implementations must embed UnimplementedExpenseServiceServer
// for forward compatibility
type ExpenseServiceServer interface {
	CreateExpense(context.Context, *CreateExpenseRequest) (*CreateExpenseResponse, error)
	GetExpense(context.Context, *GetExpenseRequest) (*GetExpenseResponse, error)
	UpdateExpense(context.Context, *UpdateExpenseRequest) (*UpdateExpenseResponse, error)
	DeleteExpense(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error)
	GetAllExpense(context.Context, *GetAllExpenseRequest) (*GetAllExpenseReponse, error)
	mustEmbedUnimplementedExpenseServiceServer()
}

// UnimplementedExpenseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpenseServiceServer struct {
}

func (UnimplementedExpenseServiceServer) CreateExpense(context.Context, *CreateExpenseRequest) (*CreateExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpense not implemented")
}
func (UnimplementedExpenseServiceServer) GetExpense(context.Context, *GetExpenseRequest) (*GetExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpense not implemented")
}
func (UnimplementedExpenseServiceServer) UpdateExpense(context.Context, *UpdateExpenseRequest) (*UpdateExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExpense not implemented")
}
func (UnimplementedExpenseServiceServer) DeleteExpense(context.Context, *DeleteExpenseRequest) (*DeleteExpenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpense not implemented")
}
func (UnimplementedExpenseServiceServer) GetAllExpense(context.Context, *GetAllExpenseRequest) (*GetAllExpenseReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExpense not implemented")
}
func (UnimplementedExpenseServiceServer) mustEmbedUnimplementedExpenseServiceServer() {}

// UnsafeExpenseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpenseServiceServer will
// result in compilation errors.
type UnsafeExpenseServiceServer interface {
	mustEmbedUnimplementedExpenseServiceServer()
}

func RegisterExpenseServiceServer(s grpc.ServiceRegistrar, srv ExpenseServiceServer) {
	s.RegisterService(&ExpenseService_ServiceDesc, srv)
}

func _ExpenseService_CreateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).CreateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expensepb.ExpenseService/CreateExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).CreateExpense(ctx, req.(*CreateExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_GetExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expensepb.ExpenseService/GetExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetExpense(ctx, req.(*GetExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_UpdateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).UpdateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expensepb.ExpenseService/UpdateExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).UpdateExpense(ctx, req.(*UpdateExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_DeleteExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).DeleteExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expensepb.ExpenseService/DeleteExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).DeleteExpense(ctx, req.(*DeleteExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_GetAllExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllExpenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetAllExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expensepb.ExpenseService/GetAllExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetAllExpense(ctx, req.(*GetAllExpenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpenseService_ServiceDesc is the grpc.ServiceDesc for ExpenseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpenseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expensepb.ExpenseService",
	HandlerType: (*ExpenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExpense",
			Handler:    _ExpenseService_CreateExpense_Handler,
		},
		{
			MethodName: "GetExpense",
			Handler:    _ExpenseService_GetExpense_Handler,
		},
		{
			MethodName: "UpdateExpense",
			Handler:    _ExpenseService_UpdateExpense_Handler,
		},
		{
			MethodName: "DeleteExpense",
			Handler:    _ExpenseService_DeleteExpense_Handler,
		},
		{
			MethodName: "GetAllExpense",
			Handler:    _ExpenseService_GetAllExpense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "expensepb/expense.proto",
}
